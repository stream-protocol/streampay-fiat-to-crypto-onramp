{"ast":null,"code":"var _jsxFileName = \"/workspace/streampay-fiat-to-crypto-onramp/src/StripeCryptoElements.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React from 'react';\n\n// ReactContext to simplify access of StripeOnramp object\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CryptoElementsContext = /*#__PURE__*/React.createContext(null);\nCryptoElementsContext.displayName = 'CryptoElementsContext';\nexport const CryptoElements = ({\n  stripeOnramp,\n  children\n}) => {\n  _s();\n  const [ctx, setContext] = React.useState(() => ({\n    onramp: null\n  }));\n  React.useEffect(() => {\n    let isMounted = true;\n    Promise.resolve(stripeOnramp).then(onramp => {\n      if (onramp && isMounted) {\n        setContext(ctx => ctx.onramp ? ctx : {\n          onramp\n        });\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [stripeOnramp]);\n  return /*#__PURE__*/_jsxDEV(CryptoElementsContext.Provider, {\n    value: ctx,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n// React hook to get StripeOnramp from context\n_s(CryptoElements, \"7BrUTEMAQ4ONGW/n6lBvJTjWipo=\");\n_c = CryptoElements;\nexport const useStripeOnramp = () => {\n  _s2();\n  const context = React.useContext(CryptoElementsContext);\n  return context === null || context === void 0 ? void 0 : context.onramp;\n};\n\n// React element to render Onramp UI\n_s2(useStripeOnramp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst useOnrampSessionListener = (type, session, callback) => {\n  _s3();\n  React.useEffect(() => {\n    if (session && callback) {\n      const listener = e => callback(e.payload);\n      session.addEventListener(type, listener);\n      return () => {\n        session.removeEventListener(type, listener);\n      };\n    }\n    return () => {};\n  }, [session, callback, type]);\n};\n_s3(useOnrampSessionListener, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport const OnrampElement = ({\n  clientSecret,\n  appearance,\n  onReady,\n  onChange,\n  ...props\n}) => {\n  _s4();\n  const stripeOnramp = useStripeOnramp();\n  const onrampElementRef = React.useRef(null);\n  const [session, setSession] = React.useState();\n  const appearanceJSON = JSON.stringify(appearance);\n  React.useEffect(() => {\n    const containerRef = onrampElementRef.current;\n    if (containerRef) {\n      // NB: ideally we want to be able to hot swap/update onramp iframe\n      // This currently results a flash if one needs to mint a new session when they need to udpate fixed transaction details\n      containerRef.innerHTML = '';\n      if (clientSecret && stripeOnramp) {\n        setSession(stripeOnramp.createSession({\n          clientSecret,\n          appearance: appearanceJSON ? JSON.parse(appearanceJSON) : {}\n        }).mount(containerRef));\n      }\n    }\n  }, [appearanceJSON, clientSecret, stripeOnramp]);\n  useOnrampSessionListener('onramp_ui_loaded', session, onReady);\n  useOnrampSessionListener('onramp_session_updated', session, onChange);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...props,\n    ref: onrampElementRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n};\n_s4(OnrampElement, \"6+jvm+97NVEtIBMCFz5XSLwULTE=\", false, function () {\n  return [useStripeOnramp, useOnrampSessionListener, useOnrampSessionListener];\n});\n_c2 = OnrampElement;\nvar _c, _c2;\n$RefreshReg$(_c, \"CryptoElements\");\n$RefreshReg$(_c2, \"OnrampElement\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CryptoElementsContext","createContext","displayName","CryptoElements","stripeOnramp","children","_s","ctx","setContext","useState","onramp","useEffect","isMounted","Promise","resolve","then","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStripeOnramp","_s2","context","useContext","useOnrampSessionListener","type","session","callback","_s3","listener","e","payload","addEventListener","removeEventListener","OnrampElement","clientSecret","appearance","onReady","onChange","props","_s4","onrampElementRef","useRef","setSession","appearanceJSON","JSON","stringify","containerRef","current","innerHTML","createSession","parse","mount","ref","_c2","$RefreshReg$"],"sources":["/workspace/streampay-fiat-to-crypto-onramp/src/StripeCryptoElements.jsx"],"sourcesContent":["import React from 'react';\n\n// ReactContext to simplify access of StripeOnramp object\nconst CryptoElementsContext =\n  React.createContext(null);\nCryptoElementsContext.displayName = 'CryptoElementsContext';\n\nexport const CryptoElements = ({\n  stripeOnramp,\n  children,\n}) => {\n  const [ctx, setContext] = React.useState(() => ({\n    onramp: null,\n  }));\n\n  React.useEffect(() => {\n    let isMounted = true;\n\n    Promise.resolve(stripeOnramp).then((onramp) => {\n      if (onramp && isMounted) {\n        setContext((ctx) => (ctx.onramp ? ctx : { onramp }));\n      }\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [stripeOnramp]);\n\n  return (\n    <CryptoElementsContext.Provider value={ctx}>\n      {children}\n    </CryptoElementsContext.Provider>\n  );\n};\n\n// React hook to get StripeOnramp from context\nexport const useStripeOnramp = () => {\n  const context = React.useContext(CryptoElementsContext);\n  return context?.onramp;\n};\n\n// React element to render Onramp UI\nconst useOnrampSessionListener = (\n  type,\n  session,\n  callback\n) => {\n  React.useEffect(() => {\n    if (session && callback) {\n      const listener = (e) => callback(e.payload);\n      session.addEventListener(type, listener);\n      return () => {\n        session.removeEventListener(type, listener);\n      };\n    }\n    return () => {};\n  }, [session, callback, type]);\n};\n\nexport const OnrampElement = ({\n  clientSecret,\n  appearance,\n  onReady,\n  onChange,\n  ...props\n}) => {\n  const stripeOnramp = useStripeOnramp();\n  const onrampElementRef = React.useRef(null);\n  const [session, setSession] = React.useState();\n\n  const appearanceJSON = JSON.stringify(appearance);\n  React.useEffect(() => {\n    const containerRef = onrampElementRef.current;\n    if (containerRef) {\n      // NB: ideally we want to be able to hot swap/update onramp iframe\n      // This currently results a flash if one needs to mint a new session when they need to udpate fixed transaction details\n      containerRef.innerHTML = '';\n\n      if (clientSecret && stripeOnramp) {\n        setSession(\n          stripeOnramp\n            .createSession({\n              clientSecret,\n              appearance: appearanceJSON ? JSON.parse(appearanceJSON) : {}\n            })\n            .mount(containerRef)\n        );\n      }\n    }\n  }, [appearanceJSON, clientSecret, stripeOnramp]);\n\n  useOnrampSessionListener('onramp_ui_loaded', session, onReady);\n  useOnrampSessionListener('onramp_session_updated', session, onChange);\n\n  return <div {...props} ref={onrampElementRef}></div>;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}