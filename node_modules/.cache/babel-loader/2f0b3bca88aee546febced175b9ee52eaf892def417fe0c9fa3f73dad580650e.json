{"ast":null,"code":"import _slicedToArray from\"/workspace/streampay-fiat-to-crypto-onramp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{loadStripeOnramp}from\"@stripe/crypto\";import{CryptoElements,OnrampElement}from'./StripeCryptoElements';import\"./App.css\";// Make sure to call loadStripeOnramp outside of a component’s render to avoid\n// recreating the StripeOnramp object on every render.\n// This is a public sample test API key.\n// Don’t submit any personally identifiable information in requests made with this key.\n// Sign in to see your own test API key embedded in code samples.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var stripeOnrampPromise=loadStripeOnramp(\"pk_test_01QZ55AeQfGutsrsRjjkToqz\");export default function App(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),clientSecret=_useState2[0],setClientSecret=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),message=_useState4[0],setMessage=_useState4[1];useEffect(function(){// Fetches an onramp session and captures the client secret\nfetch(\"/create-onramp-session\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({transaction_details:{destination_currency:\"usdc\",destination_exchange_amount:\"13.37\",destination_network:\"ethereum\"}})}).then(function(res){return res.json();}).then(function(data){return setClientSecret(data.clientSecret);});},[]);var onChange=React.useCallback(function(_ref){var session=_ref.session;setMessage(\"OnrampSession is now in \".concat(session.status,\" state.\"));},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(CryptoElements,{stripeOnramp:stripeOnrampPromise,children:clientSecret&&/*#__PURE__*/_jsx(OnrampElement,{id:\"onramp-element\",clientSecret:clientSecret,appearance:{theme:\"dark\"},onChange:onChange})}),message&&/*#__PURE__*/_jsx(\"div\",{id:\"onramp-message\",children:message})]});}","map":{"version":3,"names":["React","useState","useEffect","loadStripeOnramp","CryptoElements","OnrampElement","jsx","_jsx","jsxs","_jsxs","stripeOnrampPromise","App","_useState","_useState2","_slicedToArray","clientSecret","setClientSecret","_useState3","_useState4","message","setMessage","fetch","method","headers","body","JSON","stringify","transaction_details","destination_currency","destination_exchange_amount","destination_network","then","res","json","data","onChange","useCallback","_ref","session","concat","status","className","children","stripeOnramp","id","appearance","theme"],"sources":["/workspace/streampay-fiat-to-crypto-onramp/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { loadStripeOnramp } from \"@stripe/crypto\";\n\nimport { CryptoElements, OnrampElement } from './StripeCryptoElements';\nimport \"./App.css\";\n\n// Make sure to call loadStripeOnramp outside of a component’s render to avoid\n// recreating the StripeOnramp object on every render.\n// This is a public sample test API key.\n// Don’t submit any personally identifiable information in requests made with this key.\n// Sign in to see your own test API key embedded in code samples.\nconst stripeOnrampPromise = loadStripeOnramp(\"pk_test_01QZ55AeQfGutsrsRjjkToqz\");\n\nexport default function App() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    // Fetches an onramp session and captures the client secret\n    fetch(\n      \"/create-onramp-session\",\n      {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        transaction_details: {\n          destination_currency: \"usdc\",\n          destination_exchange_amount: \"13.37\",\n          destination_network: \"ethereum\",\n        }\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => setClientSecret(data.clientSecret));\n  }, []);\n\n  const onChange = React.useCallback(({ session }) => {\n    setMessage(`OnrampSession is now in ${session.status} state.`);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <CryptoElements stripeOnramp={stripeOnrampPromise}>\n        {clientSecret && (\n          <OnrampElement\n            id=\"onramp-element\"\n            clientSecret={clientSecret}\n            appearance={{ theme: \"dark\" }}\n            onChange={onChange}\n          />\n        )}\n      </CryptoElements>\n      {message && <div id=\"onramp-message\">{message}</div>}\n    </div>\n  );\n}"],"mappings":"gIAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,gBAAgB,KAAQ,gBAAgB,CAEjD,OAASC,cAAc,CAAEC,aAAa,KAAQ,wBAAwB,CACtE,MAAO,WAAW,CAElB;AACA;AACA;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACA,GAAM,CAAAC,mBAAmB,CAAGP,gBAAgB,CAAC,kCAAkC,CAAC,CAEhF,cAAe,SAAS,CAAAQ,GAAGA,CAAA,CAAG,CAC5B,IAAAC,SAAA,CAAwCX,QAAQ,CAAC,EAAE,CAAC,CAAAY,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA7CG,YAAY,CAAAF,UAAA,IAAEG,eAAe,CAAAH,UAAA,IACpC,IAAAI,UAAA,CAA8BhB,QAAQ,CAAC,EAAE,CAAC,CAAAiB,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAnCE,OAAO,CAAAD,UAAA,IAAEE,UAAU,CAAAF,UAAA,IAE1BhB,SAAS,CAAC,UAAM,CACd;AACAmB,KAAK,CACH,wBAAwB,CACxB,CACAC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,mBAAmB,CAAE,CACnBC,oBAAoB,CAAE,MAAM,CAC5BC,2BAA2B,CAAE,OAAO,CACpCC,mBAAmB,CAAE,UACvB,CACF,CAAC,CACH,CAAC,CAAC,CACCC,IAAI,CAAC,SAACC,GAAG,QAAK,CAAAA,GAAG,CAACC,IAAI,CAAC,CAAC,GAAC,CACzBF,IAAI,CAAC,SAACG,IAAI,QAAK,CAAAlB,eAAe,CAACkB,IAAI,CAACnB,YAAY,CAAC,GAAC,CACvD,CAAC,CAAE,EAAE,CAAC,CAEN,GAAM,CAAAoB,QAAQ,CAAGnC,KAAK,CAACoC,WAAW,CAAC,SAAAC,IAAA,CAAiB,IAAd,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CAC3ClB,UAAU,4BAAAmB,MAAA,CAA4BD,OAAO,CAACE,MAAM,WAAS,CAAC,CAChE,CAAC,CAAE,EAAE,CAAC,CAEN,mBACE/B,KAAA,QAAKgC,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBnC,IAAA,CAACH,cAAc,EAACuC,YAAY,CAAEjC,mBAAoB,CAAAgC,QAAA,CAC/C3B,YAAY,eACXR,IAAA,CAACF,aAAa,EACZuC,EAAE,CAAC,gBAAgB,CACnB7B,YAAY,CAAEA,YAAa,CAC3B8B,UAAU,CAAE,CAAEC,KAAK,CAAE,MAAO,CAAE,CAC9BX,QAAQ,CAAEA,QAAS,CACpB,CACF,CACa,CAAC,CAChBhB,OAAO,eAAIZ,IAAA,QAAKqC,EAAE,CAAC,gBAAgB,CAAAF,QAAA,CAAEvB,OAAO,CAAM,CAAC,EACjD,CAAC,CAEV"},"metadata":{},"sourceType":"module","externalDependencies":[]}