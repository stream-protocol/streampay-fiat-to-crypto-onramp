{"ast":null,"code":"var _jsxFileName = \"/workspace/streampay-fiat-to-crypto-onramp/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { loadStripeOnramp } from \"@stripe/crypto\";\nimport { CryptoElements, OnrampElement } from './StripeCryptoElements';\nimport \"./App.css\";\n\n// Make sure to call loadStripeOnramp outside of a component’s render to avoid\n// recreating the StripeOnramp object on every render.\n// This is a public sample test API key.\n// Don’t submit any personally identifiable information in requests made with this key.\n// Sign in to see your own test API key embedded in code samples.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripeOnrampPromise = loadStripeOnramp(\"pk_test_01QZ55AeQfGutsrsRjjkToqz\");\nexport default function App() {\n  _s();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    // Fetches an onramp session and captures the client secret\n    fetch(\"/create-onramp-session\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        transaction_details: {\n          destination_currency: \"usdc\",\n          destination_exchange_amount: \"13.37\",\n          destination_network: \"ethereum\"\n        }\n      })\n    }).then(res => res.json()).then(data => setClientSecret(data.clientSecret));\n  }, []);\n  const onChange = React.useCallback(({\n    session\n  }) => {\n    setMessage(`OnrampSession is now in ${session.status} state.`);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(CryptoElements, {\n      stripeOnramp: stripeOnrampPromise,\n      children: clientSecret && /*#__PURE__*/_jsxDEV(OnrampElement, {\n        id: \"onramp-element\",\n        clientSecret: clientSecret,\n        appearance: {\n          theme: \"dark\"\n        },\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"onramp-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"t+Mgq3P2s9p/tbtRKZ2So1zGNQ4=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","loadStripeOnramp","CryptoElements","OnrampElement","jsxDEV","_jsxDEV","stripeOnrampPromise","App","_s","clientSecret","setClientSecret","message","setMessage","fetch","method","headers","body","JSON","stringify","transaction_details","destination_currency","destination_exchange_amount","destination_network","then","res","json","data","onChange","useCallback","session","status","className","children","stripeOnramp","id","appearance","theme","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspace/streampay-fiat-to-crypto-onramp/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { loadStripeOnramp } from \"@stripe/crypto\";\n\nimport { CryptoElements, OnrampElement } from './StripeCryptoElements';\nimport \"./App.css\";\n\n// Make sure to call loadStripeOnramp outside of a component’s render to avoid\n// recreating the StripeOnramp object on every render.\n// This is a public sample test API key.\n// Don’t submit any personally identifiable information in requests made with this key.\n// Sign in to see your own test API key embedded in code samples.\nconst stripeOnrampPromise = loadStripeOnramp(\"pk_test_01QZ55AeQfGutsrsRjjkToqz\");\n\nexport default function App() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    // Fetches an onramp session and captures the client secret\n    fetch(\n      \"/create-onramp-session\",\n      {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        transaction_details: {\n          destination_currency: \"usdc\",\n          destination_exchange_amount: \"13.37\",\n          destination_network: \"ethereum\",\n        }\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => setClientSecret(data.clientSecret));\n  }, []);\n\n  const onChange = React.useCallback(({ session }) => {\n    setMessage(`OnrampSession is now in ${session.status} state.`);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <CryptoElements stripeOnramp={stripeOnrampPromise}>\n        {clientSecret && (\n          <OnrampElement\n            id=\"onramp-element\"\n            clientSecret={clientSecret}\n            appearance={{ theme: \"dark\" }}\n            onChange={onChange}\n          />\n        )}\n      </CryptoElements>\n      {message && <div id=\"onramp-message\">{message}</div>}\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,gBAAgB;AAEjD,SAASC,cAAc,EAAEC,aAAa,QAAQ,wBAAwB;AACtE,OAAO,WAAW;;AAElB;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,mBAAmB,GAAGL,gBAAgB,CAAC,kCAAkC,CAAC;AAEhF,eAAe,SAASM,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACAa,KAAK,CACH,wBAAwB,EACxB;MACAC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,mBAAmB,EAAE;UACnBC,oBAAoB,EAAE,MAAM;UAC5BC,2BAA2B,EAAE,OAAO;UACpCC,mBAAmB,EAAE;QACvB;MACF,CAAC;IACH,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKhB,eAAe,CAACgB,IAAI,CAACjB,YAAY,CAAC,CAAC;EACvD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,QAAQ,GAAG7B,KAAK,CAAC8B,WAAW,CAAC,CAAC;IAAEC;EAAQ,CAAC,KAAK;IAClDjB,UAAU,CAAE,2BAA0BiB,OAAO,CAACC,MAAO,SAAQ,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA;IAAK0B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB3B,OAAA,CAACH,cAAc;MAAC+B,YAAY,EAAE3B,mBAAoB;MAAA0B,QAAA,EAC/CvB,YAAY,iBACXJ,OAAA,CAACF,aAAa;QACZ+B,EAAE,EAAC,gBAAgB;QACnBzB,YAAY,EAAEA,YAAa;QAC3B0B,UAAU,EAAE;UAAEC,KAAK,EAAE;QAAO,CAAE;QAC9BT,QAAQ,EAAEA;MAAS;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACa,CAAC,EAChB7B,OAAO,iBAAIN,OAAA;MAAK6B,EAAE,EAAC,gBAAgB;MAAAF,QAAA,EAAErB;IAAO;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV;AAAChC,EAAA,CA1CuBD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}